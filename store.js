// Generated by CoffeeScript 2.1.0
var Store;

Store = (function() {
  class Store {
    constructor(name = this.name) {
      this.name = name;
      this.data = localStorage[this.name] ? JSON.parse(localStorage[this.name]) : [];
    }

    getIndexById(id) {
      return this.data.map(function(item) {
        return item.id;
      }).indexOf(id);
    }

    remember() {
      return localStorage.setItem(this.name, JSON.stringify(this.data));
    }

    save(item) {
      var index;
      if (item.id == null) {
        item.id = new Date().getTime();
      }
      index = this.getIndexById(item.id);
      if (index) {
        this.data.push(item);
      } else {
        this.data[index] = item;
      }
      return this.remember();
    }

    remove(id) {
      var index;
      index = this.getIndexById(id);
      this.data.splice(index, 1);
      return this.remember();
    }

    clear() {
      this.data = [];
      return this.remember();
    }

    find(query) {
      var hit;
      if (typeof query !== "object") {
        return [];
      }
      hit = Object.keys(query).length;
      return this.data.filter(function(item) {
        var key, match, val;
        match = 0;
        for (key in query) {
          val = query[key];
          if (item[key] === val) {
            match += 1;
          }
        }
        if (match === hit) {
          return true;
        } else {
          return false;
        }
      });
    }

    toggle(id, property) {
      var index;
      index = this.getIndexById(id);
      if (this.data[index][property] != null) {
        this.data[index][property] = !this.data[index][property];
      }
      return this.remember();
    }

  };

  Store.prototype.data = [];

  Store.prototype.name = 'data';

  return Store;

})();

export default Store;
